// <auto-generated />
using System;
using FootballIconsCAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FootballIconsCAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FootballIconsCAPI.Entities.BallonDor", b =>
                {
                    b.Property<int>("BallonDorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BallonDorID"));

                    b.Property<int>("WinnerIconID")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("BallonDorID");

                    b.HasIndex("WinnerIconID");

                    b.ToTable("BallonDorInfo");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.ChampionsCup", b =>
                {
                    b.Property<int>("ChampionsCupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChampionsCupID"));

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RunnerUp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamPlayerStatsTeamStatID")
                        .HasColumnType("int");

                    b.Property<int?>("TeamPlayerStatsTeamStatID1")
                        .HasColumnType("int");

                    b.Property<string>("Winner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ChampionsCupID");

                    b.HasIndex("TeamPlayerStatsTeamStatID");

                    b.HasIndex("TeamPlayerStatsTeamStatID1");

                    b.ToTable("ChampionsCupInfo");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.ContinentalCup", b =>
                {
                    b.Property<int>("ContinentalCupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContinentalCupID"));

                    b.Property<string>("CupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NationPlayerStatsNationStatID")
                        .HasColumnType("int");

                    b.Property<int?>("NationPlayerStatsNationStatID1")
                        .HasColumnType("int");

                    b.Property<int?>("NationPlayerStatsNationStatID2")
                        .HasColumnType("int");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RunnerUp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Winner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ContinentalCupID");

                    b.HasIndex("NationPlayerStatsNationStatID");

                    b.HasIndex("NationPlayerStatsNationStatID1");

                    b.HasIndex("NationPlayerStatsNationStatID2");

                    b.ToTable("ContinentalCupInfo");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.DomesticCup", b =>
                {
                    b.Property<int>("DomesticCupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DomesticCupID"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamPlayerStatsTeamStatID")
                        .HasColumnType("int");

                    b.Property<string>("Winner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("DomesticCupID");

                    b.HasIndex("TeamPlayerStatsTeamStatID");

                    b.ToTable("DomesticCupInfo");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.DomesticLeague", b =>
                {
                    b.Property<int>("DomesticLeagueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DomesticLeagueID"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamPlayerStatsTeamStatID")
                        .HasColumnType("int");

                    b.Property<string>("Winner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("DomesticLeagueID");

                    b.HasIndex("TeamPlayerStatsTeamStatID");

                    b.ToTable("DomesticLeagueCupInfo");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.DomesticSuperCup", b =>
                {
                    b.Property<int>("DomesticSuperCupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DomesticSuperCupID"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamPlayerStatsTeamStatID")
                        .HasColumnType("int");

                    b.Property<string>("Winner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("DomesticSuperCupID");

                    b.HasIndex("TeamPlayerStatsTeamStatID");

                    b.ToTable("DomesticSuperCupInfo");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.Icon", b =>
                {
                    b.Property<int>("IconID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IconID"));

                    b.Property<int?>("BallonDorID")
                        .HasColumnType("int");

                    b.Property<int?>("BallonDorID1")
                        .HasColumnType("int");

                    b.Property<int?>("BallonDorID2")
                        .HasColumnType("int");

                    b.Property<int?>("BallonDorID3")
                        .HasColumnType("int");

                    b.Property<int?>("BallonDorID4")
                        .HasColumnType("int");

                    b.Property<int?>("BallonDorID5")
                        .HasColumnType("int");

                    b.Property<int?>("BallonDorID6")
                        .HasColumnType("int");

                    b.Property<int?>("BallonDorID7")
                        .HasColumnType("int");

                    b.Property<int?>("BallonDorID8")
                        .HasColumnType("int");

                    b.Property<int?>("BallonDorID9")
                        .HasColumnType("int");

                    b.Property<int>("CareerGames")
                        .HasColumnType("int");

                    b.Property<int>("CareerGoals")
                        .HasColumnType("int");

                    b.Property<int>("CareerLength")
                        .HasColumnType("int");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<int>("Fantascore")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IconID");

                    b.HasIndex("BallonDorID");

                    b.HasIndex("BallonDorID1");

                    b.HasIndex("BallonDorID2");

                    b.HasIndex("BallonDorID3");

                    b.HasIndex("BallonDorID4");

                    b.HasIndex("BallonDorID5");

                    b.HasIndex("BallonDorID6");

                    b.HasIndex("BallonDorID7");

                    b.HasIndex("BallonDorID8");

                    b.HasIndex("BallonDorID9");

                    b.ToTable("IconInfo");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.Nation", b =>
                {
                    b.Property<int>("NationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NationID"));

                    b.Property<string>("Confederation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("NationID");

                    b.ToTable("NationInfo");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.NationPlayerStats", b =>
                {
                    b.Property<int>("NationStatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NationStatID"));

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("GoalsScored")
                        .HasColumnType("int");

                    b.Property<int>("IconID")
                        .HasColumnType("int");

                    b.Property<int>("NationID")
                        .HasColumnType("int");

                    b.Property<int>("WorldCupGoals")
                        .HasColumnType("int");

                    b.HasKey("NationStatID");

                    b.HasIndex("IconID")
                        .IsUnique();

                    b.ToTable("NationStatsInfo");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.Team", b =>
                {
                    b.Property<int>("TeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamID"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("TeamID");

                    b.ToTable("TeamInfo");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.TeamPlayerStats", b =>
                {
                    b.Property<int>("TeamStatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamStatID"));

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("int");

                    b.Property<int>("GoalsScored")
                        .HasColumnType("int");

                    b.Property<int>("IconID")
                        .HasColumnType("int");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("TeamStatID");

                    b.HasIndex("IconID");

                    b.HasIndex("TeamID");

                    b.ToTable("TeamStatsInfo");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.UEFACup", b =>
                {
                    b.Property<int>("UEFACupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UEFACupID"));

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RunnerUp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamPlayerStatsTeamStatID")
                        .HasColumnType("int");

                    b.Property<int?>("TeamPlayerStatsTeamStatID1")
                        .HasColumnType("int");

                    b.Property<string>("Winner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("UEFACupID");

                    b.HasIndex("TeamPlayerStatsTeamStatID");

                    b.HasIndex("TeamPlayerStatsTeamStatID1");

                    b.ToTable("UEFACupInfo");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.UEFASuperCup", b =>
                {
                    b.Property<int>("UEFASuperCupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UEFASuperCupID"));

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RunnerUp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamPlayerStatsTeamStatID")
                        .HasColumnType("int");

                    b.Property<string>("Winner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("UEFASuperCupID");

                    b.HasIndex("TeamPlayerStatsTeamStatID");

                    b.ToTable("UEFASuperCupInfo");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.WinnersCup", b =>
                {
                    b.Property<int>("WinnersCupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WinnersCupID"));

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RunnerUp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamPlayerStatsTeamStatID")
                        .HasColumnType("int");

                    b.Property<int?>("TeamPlayerStatsTeamStatID1")
                        .HasColumnType("int");

                    b.Property<string>("Winner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("WinnersCupID");

                    b.HasIndex("TeamPlayerStatsTeamStatID");

                    b.HasIndex("TeamPlayerStatsTeamStatID1");

                    b.ToTable("WinnersCupInfo");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.WorldCup", b =>
                {
                    b.Property<int>("WorldCupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorldCupID"));

                    b.Property<int?>("NationPlayerStatsNationStatID")
                        .HasColumnType("int");

                    b.Property<int?>("NationPlayerStatsNationStatID1")
                        .HasColumnType("int");

                    b.Property<int?>("NationPlayerStatsNationStatID2")
                        .HasColumnType("int");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RunnerUp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdPlace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Winner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("WorldCupID");

                    b.HasIndex("NationPlayerStatsNationStatID");

                    b.HasIndex("NationPlayerStatsNationStatID1");

                    b.HasIndex("NationPlayerStatsNationStatID2");

                    b.ToTable("WorldCupInfo");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.BallonDor", b =>
                {
                    b.HasOne("FootballIconsCAPI.Entities.Icon", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerIconID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.ChampionsCup", b =>
                {
                    b.HasOne("FootballIconsCAPI.Entities.TeamPlayerStats", null)
                        .WithMany("ChampionsCupRunnerUps")
                        .HasForeignKey("TeamPlayerStatsTeamStatID");

                    b.HasOne("FootballIconsCAPI.Entities.TeamPlayerStats", null)
                        .WithMany("ChampionsCups")
                        .HasForeignKey("TeamPlayerStatsTeamStatID1");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.ContinentalCup", b =>
                {
                    b.HasOne("FootballIconsCAPI.Entities.NationPlayerStats", null)
                        .WithMany("ContinentalCupRunnerUps")
                        .HasForeignKey("NationPlayerStatsNationStatID");

                    b.HasOne("FootballIconsCAPI.Entities.NationPlayerStats", null)
                        .WithMany("ContinentalCupThirdPlaces")
                        .HasForeignKey("NationPlayerStatsNationStatID1");

                    b.HasOne("FootballIconsCAPI.Entities.NationPlayerStats", null)
                        .WithMany("ContinentalCupsTitles")
                        .HasForeignKey("NationPlayerStatsNationStatID2");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.DomesticCup", b =>
                {
                    b.HasOne("FootballIconsCAPI.Entities.TeamPlayerStats", null)
                        .WithMany("DomesticCups")
                        .HasForeignKey("TeamPlayerStatsTeamStatID");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.DomesticLeague", b =>
                {
                    b.HasOne("FootballIconsCAPI.Entities.TeamPlayerStats", null)
                        .WithMany("DomesticLeagues")
                        .HasForeignKey("TeamPlayerStatsTeamStatID");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.DomesticSuperCup", b =>
                {
                    b.HasOne("FootballIconsCAPI.Entities.TeamPlayerStats", null)
                        .WithMany("DomesticSuperCups")
                        .HasForeignKey("TeamPlayerStatsTeamStatID");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.Icon", b =>
                {
                    b.HasOne("FootballIconsCAPI.Entities.BallonDor", null)
                        .WithMany("EigthPlace")
                        .HasForeignKey("BallonDorID");

                    b.HasOne("FootballIconsCAPI.Entities.BallonDor", null)
                        .WithMany("Fifthlace")
                        .HasForeignKey("BallonDorID1");

                    b.HasOne("FootballIconsCAPI.Entities.BallonDor", null)
                        .WithMany("FourthPlace")
                        .HasForeignKey("BallonDorID2");

                    b.HasOne("FootballIconsCAPI.Entities.BallonDor", null)
                        .WithMany("NinethPlace")
                        .HasForeignKey("BallonDorID3");

                    b.HasOne("FootballIconsCAPI.Entities.BallonDor", null)
                        .WithMany("Nominations")
                        .HasForeignKey("BallonDorID4");

                    b.HasOne("FootballIconsCAPI.Entities.BallonDor", null)
                        .WithMany("RunnerUp")
                        .HasForeignKey("BallonDorID5");

                    b.HasOne("FootballIconsCAPI.Entities.BallonDor", null)
                        .WithMany("SeventhPlace")
                        .HasForeignKey("BallonDorID6");

                    b.HasOne("FootballIconsCAPI.Entities.BallonDor", null)
                        .WithMany("SixthPlace")
                        .HasForeignKey("BallonDorID7");

                    b.HasOne("FootballIconsCAPI.Entities.BallonDor", null)
                        .WithMany("TenthPlace")
                        .HasForeignKey("BallonDorID8");

                    b.HasOne("FootballIconsCAPI.Entities.BallonDor", null)
                        .WithMany("ThirdPlace")
                        .HasForeignKey("BallonDorID9");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.NationPlayerStats", b =>
                {
                    b.HasOne("FootballIconsCAPI.Entities.Icon", null)
                        .WithOne("NationStats")
                        .HasForeignKey("FootballIconsCAPI.Entities.NationPlayerStats", "IconID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.TeamPlayerStats", b =>
                {
                    b.HasOne("FootballIconsCAPI.Entities.Icon", null)
                        .WithMany("TeamStats")
                        .HasForeignKey("IconID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballIconsCAPI.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.UEFACup", b =>
                {
                    b.HasOne("FootballIconsCAPI.Entities.TeamPlayerStats", null)
                        .WithMany("UEFACupRunnerUps")
                        .HasForeignKey("TeamPlayerStatsTeamStatID");

                    b.HasOne("FootballIconsCAPI.Entities.TeamPlayerStats", null)
                        .WithMany("UEFACups")
                        .HasForeignKey("TeamPlayerStatsTeamStatID1");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.UEFASuperCup", b =>
                {
                    b.HasOne("FootballIconsCAPI.Entities.TeamPlayerStats", null)
                        .WithMany("UEFASuperCups")
                        .HasForeignKey("TeamPlayerStatsTeamStatID");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.WinnersCup", b =>
                {
                    b.HasOne("FootballIconsCAPI.Entities.TeamPlayerStats", null)
                        .WithMany("WinnersCupRunnersUp")
                        .HasForeignKey("TeamPlayerStatsTeamStatID");

                    b.HasOne("FootballIconsCAPI.Entities.TeamPlayerStats", null)
                        .WithMany("WinnersCups")
                        .HasForeignKey("TeamPlayerStatsTeamStatID1");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.WorldCup", b =>
                {
                    b.HasOne("FootballIconsCAPI.Entities.NationPlayerStats", null)
                        .WithMany("WorldCupRunnerUps")
                        .HasForeignKey("NationPlayerStatsNationStatID");

                    b.HasOne("FootballIconsCAPI.Entities.NationPlayerStats", null)
                        .WithMany("WorldCupThirdPlaces")
                        .HasForeignKey("NationPlayerStatsNationStatID1");

                    b.HasOne("FootballIconsCAPI.Entities.NationPlayerStats", null)
                        .WithMany("WorldCupsTitles")
                        .HasForeignKey("NationPlayerStatsNationStatID2");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.BallonDor", b =>
                {
                    b.Navigation("EigthPlace");

                    b.Navigation("Fifthlace");

                    b.Navigation("FourthPlace");

                    b.Navigation("NinethPlace");

                    b.Navigation("Nominations");

                    b.Navigation("RunnerUp");

                    b.Navigation("SeventhPlace");

                    b.Navigation("SixthPlace");

                    b.Navigation("TenthPlace");

                    b.Navigation("ThirdPlace");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.Icon", b =>
                {
                    b.Navigation("NationStats")
                        .IsRequired();

                    b.Navigation("TeamStats");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.NationPlayerStats", b =>
                {
                    b.Navigation("ContinentalCupRunnerUps");

                    b.Navigation("ContinentalCupThirdPlaces");

                    b.Navigation("ContinentalCupsTitles");

                    b.Navigation("WorldCupRunnerUps");

                    b.Navigation("WorldCupThirdPlaces");

                    b.Navigation("WorldCupsTitles");
                });

            modelBuilder.Entity("FootballIconsCAPI.Entities.TeamPlayerStats", b =>
                {
                    b.Navigation("ChampionsCupRunnerUps");

                    b.Navigation("ChampionsCups");

                    b.Navigation("DomesticCups");

                    b.Navigation("DomesticLeagues");

                    b.Navigation("DomesticSuperCups");

                    b.Navigation("UEFACupRunnerUps");

                    b.Navigation("UEFACups");

                    b.Navigation("UEFASuperCups");

                    b.Navigation("WinnersCupRunnersUp");

                    b.Navigation("WinnersCups");
                });
#pragma warning restore 612, 618
        }
    }
}
